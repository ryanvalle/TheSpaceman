package  {		import flash.display.*;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.net.URLRequest;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import flash.utils.Timer;	import flash.events.TimerEvent;		import flash.text.TextFormat;	import flash.text.TextField;		public class gameScreen extends MovieClip {		//MUSIC CONTROL		private var theTheme:Sound;		private var theThemeLoop:SoundChannel;		private var musicVol:SoundTransform = new SoundTransform(.3);		private var sfxVol:SoundTransform = new SoundTransform(.6);				//GENERAL CONTROLS		private var starBackGround = new starBG();				//SPACE MAN CONTROLS		private var playerHit:circleHit = new circleHit();		private var thePlayer:spaceMan = new spaceMan();		private var positionX:Number = 25;		private var positionY:Number = 190;		private var accelShipX:Number = 0;		private var accelShipY:Number = 0;		private var vX:Number = 0;		private var vY:Number = 0;		private var friction:Number = 1;		private var fireSpace:Boolean = false;		private var removePlayer:Boolean = false;				//bulletArray		private var bulletArray:Array;		private var enemyArray:Array = new Array();		private var sateArray:Array = new Array();				//ENEMY VARIABLES		private var asteroidOne:ast1;		private var satellite1:sate1;		private var enemyAdd:Boolean = true;				//SCORING		private var firstFormat:TextFormat = new TextFormat();		private var scoreBox:TextField;		private var scoreStart:Number = 0;		private var scoreFieldString:String = scoreStart.toString();		private var astLimit:Number = Math.floor((scoreStart / 500) + 1);		private var sateLimit:Number = Math.floor((scoreStart / 1000) + 1);				private var scoreStart1:Number = 0;		private var scoreFieldString1:String = scoreStart1.toString();				private var scoreTimer:Timer;		private var scoreDelay:int = 10;				public function gameScreen() {						addChild(starBackGround);									//BRING IN SOUND			theTheme = new Sound();			theThemeLoop = new SoundChannel();						theTheme.load(new URLRequest("gameTheme.mp3"));			theThemeLoop = theTheme.play(0,1000,musicVol);						//BRING IN GAME			bulletArray = new Array();						addChild(playerHit);			playerHit.x = positionX;			playerHit.y = positionY;			addChild (thePlayer);			thePlayer.stop();			thePlayer.x = positionX;			thePlayer.y = positionY;						if (enemyAdd == true) {				addEnemy();				addSatellite();			}						firstFormat.color = 0xff9948;			firstFormat.bold = true;			firstFormat.font = "Arial";			firstFormat.size = 14;						scoreTimer = new Timer(scoreDelay);			scoreTimer.addEventListener(TimerEvent.TIMER,score);			scoreTimer.start();						scoreBox = new TextField(); 			addChild(scoreBox);			scoreBox.width = 150;			scoreBox.height = 20;			scoreBox.x = 640 - scoreBox.width - 5;			scoreBox.y = 5;			scoreBox.text = "Score: " + scoreFieldString1;			scoreBox.setTextFormat(firstFormat);			scoreBox.selectable = false;					addEventListener(Event.ENTER_FRAME,playerDie);			addEventListener(Event.ENTER_FRAME,playerMove);			addEventListener(Event.ENTER_FRAME,doShoot);			addEventListener(Event.ENTER_FRAME,enemyMove);			addEventListener(Event.ENTER_FRAME,sateMove);		}				private function score(event:TimerEvent = null):void {			scoreStart++;			//trace(scoreStart);			scoreFieldString = scoreStart.toString();			astLimit = Math.floor((scoreStart / 500) + 1);			sateLimit = Math.floor((scoreStart / 1000) + 1);					}				private function playerDie(event:Event):void {			for (var i=0; i < enemyArray.length; i++) {				var theAst1:ast1 = ast1(enemyArray[i]);					if (playerHit.hitTestObject(theAst1)) {						thePlayer.play();						scoreTimer.stop();																	var playerBoom:Sound = new Sound();						var playerBoomChannel:SoundChannel = new SoundChannel();						playerBoom.load(new URLRequest("explode.mp3"));						playerBoomChannel = playerBoom.play(0,1,musicVol);												removeEventListener(Event.ENTER_FRAME,playerMove);						removePlayer = true;						enemyAdd = false;					} 			}						for (var j=0; j < sateArray.length; j++) {				var theSatellite:sate1 = sate1(sateArray[j]);					if (playerHit.hitTestObject(theSatellite)) {						thePlayer.play();						scoreTimer.stop();												var playerBoom1:Sound = new Sound();						var playerBoomChannel1:SoundChannel = new SoundChannel();						playerBoom1.load(new URLRequest("explode.mp3"));						playerBoomChannel1 = playerBoom1.play(0,1,musicVol);												removeEventListener(Event.ENTER_FRAME,playerMove);						removePlayer = true;						enemyAdd = false;					} 			}									if (removePlayer == true) {				thePlayer.alpha -= .1;				if (thePlayer.alpha < 0) {					removeChild(thePlayer);						removeEventListener(Event.ENTER_FRAME,playerDie);					var overScreen:gameOver = new gameOver(scoreFieldString1);					addChild(overScreen);										removeChild(playerHit);					removeChild(scoreBox);					removeChild(starBackGround);					for (var l:int = 0; l < sateArray.length; l++) {						var myEnemy4:sate1  = sate1(sateArray[l]);						removeChild(myEnemy4);						sateArray.splice(i,1);					}					for (var m:int = 0; m < enemyArray.length; m++) {						var myEnemy3:ast1  = ast1(enemyArray[m]);						removeChild(myEnemy3);						enemyArray.splice(i,1);					}										removeEventListener(Event.ENTER_FRAME,enemyMove);					removeEventListener(Event.ENTER_FRAME,sateMove);					theThemeLoop.stop();									}			}		}				private function addEnemy() {			if (enemyAdd == true) {				for (var i:int = 0; i < 2; i++) {					asteroidOne = new ast1();					addChild(asteroidOne);					asteroidOne.scaleX = asteroidOne.scaleY = Math.random() * .4;					if (asteroidOne.scaleX < .15) {						asteroidOne.scaleX = asteroidOne.scaleY = .5;						asteroidOne.y = Math.random() * 380;					} else {						asteroidOne.y = Math.random() * 380;					}					asteroidOne.x = 700 + asteroidOne.width + (Math.random() * 400);					asteroidOne.rotation = Math.random() * 180;					enemyArray.push(asteroidOne);				}			}		}				private function addSatellite() {			if (enemyAdd == true) {				for (var i:int = 0; i < 1; i++) {					satellite1 = new sate1();					addChild(satellite1);					satellite1.scaleX = satellite1.scaleY = Math.random() * .95;					satellite1.x = 640;					if (satellite1.scaleX < .2) {						satellite1.scaleX = satellite1.scaleY = 1;						satellite1.y = Math.random() * 380;					} else {						satellite1.y = Math.random() * 380;					}					sateArray.push(satellite1);				}			}		}				private function sateMove(event:Event):void {			for (var i:int = 0; i < sateArray.length; i++) {				var myEnemy1:sate1  = sate1(sateArray[i]);				myEnemy1.x += 10 * -1;								if (myEnemy1.x < -800 - myEnemy1.width) {					removeChild(myEnemy1);					sateArray.splice(i,1);										if (sateArray.length < sateLimit) {						addSatellite();					}				}								if (myEnemy1.y < 0 - myEnemy1.height || myEnemy1.y > 380+myEnemy1.height) {					removeChild(myEnemy1);					sateArray.splice(i,1);					if (sateArray.length < 1) {						addSatellite();					}				}			}		}				private function enemyMove(event:Event):void {			for (var i:int = 0; i < enemyArray.length; i++) {				var myEnemy:ast1  = ast1(enemyArray[i]);				myEnemy.x += 10 * -1;								if (myEnemy.x < -100 - myEnemy.width) {					removeChild(myEnemy);					enemyArray.splice(i,1);														if (enemyArray.length < astLimit) {						addEnemy();					}				}								if (myEnemy.y < 0 - myEnemy.height || myEnemy.y > 380+myEnemy.height) {					removeChild(myEnemy);					enemyArray.splice(i,1);					if (enemyArray.length < 8) {						addEnemy();					}				}			}		}				private function doShoot(event:Event):void {			for (var i:int = 0; i < bulletArray.length; i++) {				var myBullet:Box = Box(bulletArray[i]);				myBullet.x += 10;								for (var j:int = 0; j < enemyArray.length; j++) {					var theAst1:ast1 = ast1(enemyArray[j]);					if (myBullet.hitTestObject(theAst1)) {						theAst1.explode();												if (enemyAdd == true) {							scoreStart1 += 500;							scoreFieldString1 = scoreStart1.toString();							scoreBox.text = "Score: " + scoreFieldString1;							scoreBox.setTextFormat(firstFormat);						}						var explodeSound:Sound = new Sound();						var explodeChannel:SoundChannel = new SoundChannel();						explodeSound.load(new URLRequest("explode.mp3"));						explodeChannel = explodeSound.play(0,1,musicVol);												enemyArray.splice(j,1);						removeChild(myBullet);						bulletArray.splice(i,1);						addEnemy();					}				}								for (var k:int = 0; k < sateArray.length; k++) {					var theSat1:sate1 = sate1(sateArray[k]);					if (myBullet.hitTestObject(theSat1)) {						theSat1.explode();												var explodeSound2:Sound = new Sound();						var explodeChannel2:SoundChannel = new SoundChannel();						explodeSound2.load(new URLRequest("explode.mp3"));						explodeChannel2 = explodeSound2.play(0,1,musicVol);												if (enemyAdd == true) {							scoreStart1 -= 200;							scoreFieldString1 = scoreStart1.toString();							scoreBox.text = "Score: " + scoreFieldString1;							scoreBox.setTextFormat(firstFormat);						} 												sateArray.splice(k,1);						removeChild(myBullet);						bulletArray.splice(i,1);						addSatellite();					}				}								if (myBullet.x > 640) {					removeChild(myBullet);					bulletArray.splice(i,1);				}							}		}				public function fire():void {			var theBullet:Box = new Box(8,4);						//LIMIT AMMO TO 2 SHOTS			if (bulletArray.length < 2) {				if (enemyAdd == true) {					addChild(theBullet);										var laserSound:Sound = new Sound();					var laserChannel:SoundChannel = new SoundChannel();					laserSound.load(new URLRequest("laser.mp3"));					laserChannel = laserSound.play(0,1,sfxVol);											theBullet.x = thePlayer.x + thePlayer.width;					theBullet.y = thePlayer.y + thePlayer.height / 2 -5;					bulletArray.push(theBullet);				}			} 						}						private function keysDown(event:KeyboardEvent):void {			switch (event.keyCode) {				case Keyboard.UP :				accelShipX = -.7;				friction = 1;				break;								case Keyboard.DOWN :				accelShipX = .7;				friction = 1;				break;								case Keyboard.RIGHT :				accelShipY = .7;				friction = 1;				break;								case Keyboard.LEFT :				accelShipY = -.7;				friction = 1;				break;								case Keyboard.SPACE :				fire();				break;			}		}				private function keysUp(event:KeyboardEvent):void {			switch (event.keyCode) {				case Keyboard.UP :				accelShipX = 0;				friction = .96;				break;								case Keyboard.DOWN :				accelShipX = 0;				friction = .96;				break;								case Keyboard.RIGHT :				accelShipY = 0;				friction = .96;				break;								case Keyboard.LEFT :				accelShipY = 0;				friction = .96;				break;								case Keyboard.SPACE :				break;			}		}				private function playerMove(event:Event):void {			//KEY UP DOWN EVENTS 			parent.stage.addEventListener(KeyboardEvent.KEY_DOWN,keysDown);			parent.stage.addEventListener(KeyboardEvent.KEY_UP,keysUp);						//GRAVITY FUNCTIONS TO MOVE THE SHIP			vX += accelShipY;			vY += accelShipX;			vX *= friction;			vY *= friction;			thePlayer.x += vX;			thePlayer.y += vY;						playerHit.x += vX;			playerHit.y += vY;						//BORDERLINES			if (thePlayer.x < 25) {				thePlayer.x = 25;				vX = 0;			} else if (thePlayer.x > 300) {				thePlayer.x = 300;				vX = 0;			}						if (thePlayer.y < 25) {				thePlayer.y = 25;				vY = 0;			} else if (thePlayer.y > stage.stageHeight - 25 - thePlayer.height) {				thePlayer.y = stage.stageHeight - 25 - thePlayer.height;				vY = 0;			}						//BORDERLINES			if (playerHit.x < 25) {				playerHit.x = 25;				vX = 0;			} else if (playerHit.x > 300) {				playerHit.x = 300;				vX = 0;			}						if (playerHit.y < 25) {				playerHit.y = 25;				vY = 0;			} else if (playerHit.y > stage.stageHeight - 25 - playerHit.height) {				playerHit.y = stage.stageHeight - 25 - playerHit.height;				vY = 0;			}		}			}	}