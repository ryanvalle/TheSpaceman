package  {		import flash.display.MovieClip;	import flash.display.Stage;	import flash.display.Sprite;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import flash.events.Event;	import flash.events.MouseEvent;		public class inScreen extends MovieClip {				private var instructions:instructScreen;		private var thePlayer:spaceMan = new spaceMan();		private var positionX:Number = 60;		private var positionY:Number = 320;		private var theReturn:returnButton = new returnButton();		private var clearBullet:Boolean = false;				//SPACE MAN CONTROLS		private var accelShipX:Number = 0;		private var accelShipY:Number = 0;		private var vX:Number = 0;		private var vY:Number = 0;		private var friction:Number = 1;		private var fireSpace:Boolean = false;				//bulletArray		private var bulletArray:Array;		private var enemyArray:Array;				public function inScreen() {			bulletArray = new Array();						instructions = new instructScreen();			addChild(instructions);			instructions.x = 0;			instructions.play();						addChild(theReturn);			theReturn.x = 640 - theReturn.width - 10;			theReturn.y = 380 - theReturn.height - 10;			theReturn.buttonMode = true;						addChild (thePlayer);			thePlayer.x = positionX;			thePlayer.y = positionY;			thePlayer.stop();												instructions.addEventListener(Event.ENTER_FRAME,playerMove);			addEventListener(Event.ENTER_FRAME,doShoot);				theReturn.addEventListener(MouseEvent.MOUSE_DOWN, returnHome);				}				private function keysDown(event:KeyboardEvent):void {			switch (event.keyCode) {				case Keyboard.UP :				accelShipX = -.7;				friction = 1;				break;								case Keyboard.DOWN :				accelShipX = .7;				friction = 1;				break;								case Keyboard.RIGHT :				accelShipY = .7;				friction = 1;				break;								case Keyboard.LEFT :				accelShipY = -.7;				friction = 1;				break;								case Keyboard.SPACE :				fire();				break;			}		}				private function keysUp(event:KeyboardEvent):void {			switch (event.keyCode) {				case Keyboard.UP :				accelShipX = 0;				friction = .96;				break;								case Keyboard.DOWN :				accelShipX = 0;				friction = .96;				break;								case Keyboard.RIGHT :				accelShipY = 0;				friction = .96;				break;								case Keyboard.LEFT :				accelShipY = 0;				friction = .96;				break;								case Keyboard.SPACE :								break;			}		}				private function playerMove(event:Event):void {			//KEY UP DOWN EVENTS 			stage.addEventListener(KeyboardEvent.KEY_DOWN,keysDown);			stage.addEventListener(KeyboardEvent.KEY_UP,keysUp);						//GRAVITY FUNCTIONS TO MOVE THE SHIP			vX += accelShipY;			vY += accelShipX;			vX *= friction;			vY *= friction;			thePlayer.x += vX;			thePlayer.y += vY;						//BORDERLINES			if (thePlayer.x < 25) {				thePlayer.x = 25;				vX = 0;			} else if (thePlayer.x > stage.stageWidth - 25 - thePlayer.width) {				thePlayer.x =  stage.stageWidth - 25 - thePlayer.width;				vX = 0;			}						if (thePlayer.y < 25) {				thePlayer.y = 25;				vY = 0;			} else if (thePlayer.y > stage.stageHeight - 25 - thePlayer.height) {				thePlayer.y = stage.stageHeight - 25 - thePlayer.height;				vY = 0;			}		}				public function doShoot(event:Event):void {			for (var i:int = 0; i < bulletArray.length; i++) {				var myBullet:Box = Box(bulletArray[i]);				myBullet.x += 10;				if (myBullet.x > 640) {					removeChild(myBullet);					bulletArray.splice(i,1);				}											}		}				private function returnHome(event:MouseEvent):void {			theReturn.removeEventListener(MouseEvent.MOUSE_DOWN,returnHome);			instructions.removeEventListener(Event.ENTER_FRAME,playerMove);			stage.removeEventListener(KeyboardEvent.KEY_DOWN,keysDown);			stage.removeEventListener(KeyboardEvent.KEY_UP,keysUp);					removeChild(instructions);			removeChild(thePlayer);			removeChild(theReturn);		}				private function fire():void {			var theBullet:Box = new Box(8,4);			if (bulletArray.length < 2) {				addChild(theBullet);				theBullet.x = thePlayer.x + thePlayer.width;				theBullet.y = thePlayer.y + thePlayer.height / 2 - 5;				bulletArray.push(theBullet);			}		}			}	}